
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Fake Algoan Website</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/>
    <style type="text/css">
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      .button-group {
        text-align: center;
        margin-top: 50px;
      }
      .redirect-button {
        cursor: pointer;
        padding: 20px;
        border: none;
        outline: none;
        background: #003d4b;
        font-weight: bold;
        color: white;
        font-size: 16px;
        display: block;
        margin: auto;
        margin-bottom: 30px;
        width: 290px;
        max-width: 90%;
      }
      html, body {
        width: 100%;
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div class="button-group">
      <button class="redirect-button" id="bridge-redirection" onclick="onButtonClick()">Launch Bridge redirection process</button>
      <button class="redirect-button" id="redirect-to-bridge" onclick="redirectUser()">Redirect to bridge</button>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
    <script>
      let customerId;
      if (localStorage.getItem('customerId') && '{{ code }}' !== '') {
        const payload = {
          customerId: localStorage.getItem('customerId'),
          temporaryCode: '{{ code }}',
        };
        axios.post('{{ bankDetailsRequiredSubscription.target }}', {
          payload,
          subscription: {
            id: '{{ bankDetailsRequiredSubscription.id }}',
            target: '{{ bankDetailsRequiredSubscription.target }}',
            eventName: '{{ bankDetailsRequiredSubscription.eventName }}',
            status: '{{ bankDetailsRequiredSubscription.status }}'
          },
          time: Date.now(),
          index: Math.floor(Math.random() * 100),
          id: makeId(12),
        }, {
          headers: {
            'x-hub-signature': 'sha256=' + CryptoJS.HmacSHA256(JSON.stringify(payload), '{{ bankDetailsRequiredSubscription.secret }}').toString()
          }
        });

        localStorage.removeItem('customerId');
      }

      function onButtonClick() {
        /**
         * Create a new customer
         */
        return axios.post('{{ algoanBaseUrl }}' + '/v2/customers', {
          callbackUrl: 'http://localhost:8080/callback/2/dd288579-c758-4022-b1f6-d47b9e79b704',
        }, {
          headers: {
            'Authorization': '{{token}}',
          }
        })
        .then(function(response) {
          localStorage.setItem('customerId', response.data.id);
          customerId = response.data.id;
          const payload = {
            customerId,
          };
          return axios.post('{{ subscription.target }}', {
            payload,
            subscription: {
              id: '{{ subscription.id }}',
              target: '{{ subscription.target }}',
              eventName: '{{ subscription.eventName }}',
              status: '{{ subscription.status }}'
            },
            time: Date.now(),
            index: Math.floor(Math.random() * 100),
            id: makeId(12),
          }, {
            headers: {
              'x-hub-signature': 'sha256=' + CryptoJS.HmacSHA256(JSON.stringify(payload), '{{ subscription.secret }}').toString()
            }
          });
        });
      }

      function redirectUser() {
        return axios.get('{{ algoanBaseUrl }}' + '/v2/customers/' + customerId, {
          headers: {
            'Authorization': '{{token}}',
          }
        })
        .then(function(response) {
          if (response.data.redirectUrl === undefined) {
            alert('No redirect URL found in the Customer! Please check the "aggregator_link_required" handler');
            return;
          }
          window.location.href = response.data.redirectUrl;
        });
      }

      function makeId(length) {
        let result = '';
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const charactersLength = characters.length;
        for ( var i = 0; i < length; i++ ) {
          result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
      }
    </script>
  </body>
</html>